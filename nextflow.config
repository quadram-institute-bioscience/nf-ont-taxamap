manifest {
    name              = 'nf-ont-taxamap'
    mainScript        = 'main.nf'
    description       = 'A Nextflow pipeline for taxonomic profiling ONT reads'
    author            = 'Thanh Le Viet'
    version           = '0.1'
    nextflowVersion   = '>=23.0.0'
}

plugins {
    id 'nf-validation@0.2.1'
}

includeConfig './config/base.conf'
includeConfig './config/params.conf'
includeConfig './config/modules.conf'
// includeConfig './config/climb.conf'
// includeConfig './config/mail.conf'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']


profiles {

    debug { process.beforeScript = 'echo $HOSTNAME; echo $(which python)' }

    conda {
        conda.enabled          = true
        params.enable_conda    = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }

    mamba {
        conda.useMamba         = true
    }

    micromamba {
        conda.useMicromamba    = true
    }

    docker {
        docker.enabled         = true
        docker.userEmulation   = true
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    singularity {
        singularity.enabled    = true
        singularity.autoMounts = true
        singularity.cacheDir = "/qib/platforms/Informatics/transfer/outgoing/singularity/bart"
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    podman {
        podman.enabled         = true
        docker.enabled         = false
        singularity.enabled    = false
        shifter.enabled        = false
        charliecloud.enabled   = false
    }
    shifter {
        shifter.enabled        = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        charliecloud.enabled   = false
    }
    charliecloud {
        charliecloud.enabled   = true
        docker.enabled         = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
    }

    wave {
        wave.enabled                    = true
        wave.strategy                   = ['conda']
        wave.build.conda.basePackages   = ['conda-forge::procps-ng']
    }

    test_input_as_files {
        params.email                    = false
        params.input                    = "$baseDir/test-data/files"
        params.outdir                   = "$baseDir/test-data/results_files"
        params.skip_filter_time         = false
        params.no_run_stub              = true
    }
    
    qib {
        process {
            executor = 'slurm'
            queue = 'qib-galaxy'
            container = 'csvtk_kma_minimap2_nanoq_pruned_d37ce9b9ec5af9a8.sif'
        
        withLabel: 'renv' {
            container = "r-base_r-data.table_r-glue_r-jsonlite_pruned_95520b07f1f86424.sif"
        }
        
        withLabel: 'report' {
            container = "python_pip_click_ete3_pruned_25377d911c86dc92.sif"
        }
        
        withName: 'DEHUMAN2' {
            memory = { 16.GB * task.attempt }
            errorStrategy = 'retry'
            maxRetries = 3
            }
        }
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}


env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}


def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}

dag {
    enabled = true
    file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.html"
}

mail {
    smtp.host = 'mail.nbi.ac.uk'
    smtp.port = 25
    smtp.auth = false
    smtp.starttls.enable = false
    from = 'no-reply@quadram.ac.uk'
}
